//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.0 in JDK 1.6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2007.12.27 at 09:50:06 AM IST
//

package org.sloc.config;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for FileType complex type.
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name=&quot;FileType&quot;&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base=&quot;{http://www.w3.org/2001/XMLSchema}anyType&quot;&gt;
 *       &lt;sequence&gt;
 *         &lt;element name=&quot;file-type&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot;/&gt;
 *         &lt;element name=&quot;file-extension&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot; maxOccurs=&quot;unbounded&quot;/&gt;
 *         &lt;element name=&quot;singleline-comment&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot;/&gt;
 *         &lt;element name=&quot;multiline-comment-start&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot;/&gt;
 *         &lt;element name=&quot;multiline-comment-end&quot; type=&quot;{http://www.w3.org/2001/XMLSchema}string&quot;/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FileType", propOrder = { "fileType", "fileExtension", "singlelineComment", "multilineCommentStart", "multilineCommentEnd" })
public class FileType implements Comparator<FileType>, Comparable<FileType> {

  @XmlElement(name = "file-type", required = true)
  protected String fileType;
  @XmlElement(name = "file-extension", required = true)
  protected List<String> fileExtension;
  @XmlElement(name = "singleline-comment", required = true)
  protected String singlelineComment;
  @XmlElement(name = "multiline-comment-start", required = true)
  protected String multilineCommentStart;
  @XmlElement(name = "multiline-comment-end", required = true)
  protected String multilineCommentEnd;

  /**
   * Gets the value of the fileType property.
   * @return possible object is {@link String }
   */
  public String getFileType() {
    return fileType;
  }

  /**
   * Sets the value of the fileType property.
   * @param value
   *          allowed object is {@link String }
   */
  public void setFileType(String value) {
    this.fileType = value;
  }

  /**
   * Gets the value of the fileExtension property.
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present inside
   * the JAXB object. This is why there is not a <CODE>set</CODE> method for the fileExtension property.
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
   * getFileExtension().add(newItem);
   * </pre>
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link String }
   */
  public List<String> getFileExtension() {
    if (fileExtension == null) {
      fileExtension = new ArrayList<String>();
    }
    return this.fileExtension;
  }

  /**
   * Gets the value of the singlelineComment property.
   * @return possible object is {@link String }
   */
  public String getSinglelineComment() {
    return singlelineComment;
  }

  /**
   * Sets the value of the singlelineComment property.
   * @param value
   *          allowed object is {@link String }
   */
  public void setSinglelineComment(String value) {
    this.singlelineComment = value;
  }

  /**
   * Gets the value of the multilineCommentStart property.
   * @return possible object is {@link String }
   */
  public String getMultilineCommentStart() {
    return multilineCommentStart;
  }

  /**
   * Sets the value of the multilineCommentStart property.
   * @param value
   *          allowed object is {@link String }
   */
  public void setMultilineCommentStart(String value) {
    this.multilineCommentStart = value;
  }

  /**
   * Gets the value of the multilineCommentEnd property.
   * @return possible object is {@link String }
   */
  public String getMultilineCommentEnd() {
    return multilineCommentEnd;
  }

  /**
   * Sets the value of the multilineCommentEnd property.
   * @param value
   *          allowed object is {@link String }
   */
  public void setMultilineCommentEnd(String value) {
    this.multilineCommentEnd = value;
  }

  /**
   * @see java.lang.Object#toString()
   */
  @SuppressWarnings("nls")
  @Override
  public String toString() {
    return getFileType();
  }

  @Override
  public boolean equals(Object object) {
    if (object instanceof FileType) {
      FileType that = (FileType) object;
      return this.getFileType().equals(that.getFileType());
    }
    return super.equals(object);
  }

  @SuppressWarnings("nls")
  public String getFullString() {
    StringBuilder builder = new StringBuilder();
    builder.append(fileType);
    builder.append(" >>> Extns::: ");
    builder.append(fileExtension);
    return builder.toString();
  }

  /**
   * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
   */
  public int compare(FileType f1, FileType f2) {
    return f1.getFileType().compareTo(f2.getFileType());
  }

  /**
   * @see java.lang.Comparable#compareTo(java.lang.Object)
   */
  public int compareTo(FileType f1) {
    return this.getFileType().compareTo(f1.getFileType());
  }

}
